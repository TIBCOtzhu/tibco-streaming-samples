// Copyright 2021-2023 Cloud Software Group, Inc.
//
//

@Library('workflowLibs') _

def jobUtil = new com.tibco.workflow.JobUtil()

String platform = jobUtil.getJobPlatform(defaultPlatform: "linux")

String executorLabel = jobUtil.getStrBuildLabelEx(
    platform: platform, params: params,
    base: [ all: "c.unix-tools",
           linux: "(o.rh8 || o.almalinux8) && c.docker-compatible-linux-3.10 && c.unix-tools && q.str",
           macos: "o.macos",
           windows: "o.windows && c.windows-10-compatible && a.x86_64" ],
)

pipeline {
    options {
        buildDiscarder(logRotator(numToKeepStr: '2' ))
        quietPeriod(600)
        timeout(time: 4, unit: 'HOURS')
        skipDefaultCheckout() // to subdirectory, see below
    }

    triggers {
        // Poll once a day.
	pollSCM('H 0 * * *')
    }

    parameters {
        choice(name: 'deployArtifacts', choices: ['never', 'default', 'always'], // never first; just for testing
               description: 'The default is never to deploy because this is a test-only pipeline.')

        string(name: 'mavenExtras', defaultValue: '',
               description: 'Extra JVM options for Maven, usually -DskipTests and the like.')

        booleanParam(name: 'cleanWorkspace', defaultValue: true, description: 'Clean workspace before build.')

	// Change authors always get succcess emails.
        // Team branches send failure emails to the team, too.
        string(name: 'notificationEmail', defaultValue: 'when:team:hello@cloud.team, change-authors',
               description: 'Email addresses for notifications on failure.')

        // Just notify change authors on any branch, since this will never get released.
        string(name: 'successEmail', defaultValue: 'change-authors',
               description: 'Email addresses for notifications on success.')


        choice(name: 'buildVerbose', choices: ['default', 'pipeline', 'tools' ],
               description: 'Make build more verbose with pipeline and tool diagnostics.')


	//string(name: 'streamingTargetVersion', defaultValue: '',
   		 //description: 'Override the version of Streaming used by the samples.')

	string(name: 'PROJECT_VERSION', defaultValue: '',
		 description: 'The version of Streaming that the samples use.')

    }
    
    agent {
        node {
            label "${executorLabel}"        }
    }

    environment { // Not persisted in Artifactory build record.
        // Needed for Maven CommonSettings.
        TIBCO_EP_HOME = "${env.WORKSPACE}/"
    }

    stages {
        stage ('janitor-before-job') {
            steps {
                script {
                    epDeclarative.preCleanup()
                }
            }
        }

        stage ('checkout') {
            steps {
                // Check out to a subdirectory to avoid clashes with TIBCO_EP_HOME
                // and other helper directories in the workspace.
                dir ('src') {
                    checkout scm
                }
            }
        }

        stage ('Build') {
            steps {
                script {
		    def newJobUtil = new com.tibco.workflow.JobUtil()
                    def streamingPipeline = "runtime"
		    def newPlatform = "linux"
                    epDeclarative.buildInit(
                        pomFile: 'src/pom.xml',
                        javaTool: newJobUtil.getOracleJava17Tool(),
                        mavenTool: newJobUtil.getMaven38Tool(),
			testPlatforms: [ "macos", "windows" ],
                        primaryPlatform: "linux"
                    )
		
		    // Override the streaming target version if supplied
                    // if (params.streamingTargetVersion) {
                    //   env.STREAMING_VERSION = params.streamingTargetVersion
                    //  }
			
			if (params.PROJECT_VERSION) {
                      		  env.PROJECT_VERSION = params.PROJECT_VERSION
                   	 }


                    epDeclarative.buildMaven(
                        goals: "install",
                        platform: platform)
                }
            }
        }
    }

    post {
        always {
            script {
                epDeclarative.postAlways()
            }
        }

        cleanup {
            script {
                epDeclarative.postCleanup()
            }
        }
    }
}
